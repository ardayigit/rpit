%% ==============================================================================
%% 
%% 
%% 
%%
%% Abstract:
%%   Example main for bare board target (multirate model)
%%
%% Copyright 1994-2013 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%function FcnMultiTaskingMain() void

  %<SetCurrentUtilsIncludesIdx("main_util_incl")>
  
  %if GenerateSampleERTMain
    %assign ::CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %warning Overriding example ert_main.c!
  %endif

  %openfile tmpBuf
  %<LibERTMainDeclareVariables(TLC_TRUE,TLC_TRUE)>
  %<LibWriteModelData()>\
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_data_defn", tmpBuf)>
  
  %openfile tmpBuf
  #include <stdio.h>
  #include <stdlib.h>
  #include <stdint.h>
  #include <pthread.h>
  #include <string.h>
  #include <float.h>
  #include <unistd.h>
  #include <time.h>
  #include <sys/timerfd.h>
  #include <sys/time.h>
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  %<SLibIncludeUsedCoderTypesFilenames()>
  %if ExtMode
    #include "ext_work.h" /* External mode header file */
  %endif

  struct rpi_periodic_info
  {
    int_T timer_fd;
    uint_T wakeups_missed;
  };

  uint_T rpi_cpu_usage = 0;
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_incl", tmpBuf)>
  
  %openfile tmpBuf

  %assign fcnReturns = "static int_T"
  %assign fcnName = "rpi_make_periodic"
  %assign fcnParams = "uint_T period, struct rpi_periodic_info *info"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
  int_T ret;
	uint_T ns;
	uint_T sec;
	int_T fd;
	struct itimerspec itval;

	/* Create the timer */
	fd = timerfd_create (CLOCK_MONOTONIC, 0);
	info->wakeups_missed = 0;
	info->timer_fd = fd;
	if (fd == -1)
		return fd;

	/* Make the timer periodic */
	sec = period/1000000;
	ns = (period - (sec * 1000000)) * 1000;
	itval.it_interval.tv_sec = sec;
	itval.it_interval.tv_nsec = ns;
	itval.it_value.tv_sec = sec;
	itval.it_value.tv_nsec = ns;
	ret = timerfd_settime (fd, 0, &itval, NULL);
	return ret;
  }   %%end rpi_make_periodic function

  %assign fcnReturns = "static int_T"
  %assign fcnName = "rpi_wait_period"
  %assign fcnParams = "struct rpi_periodic_info *info"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
	unsigned long long missed;
	int_T ret;

	/* 
	  Wait for the next timer event. 
	  If we have missed any the
	  number is written to "missed"
	*/
	
	ret = read(info->timer_fd, &missed, sizeof (missed));
	
	if (ret == -1)
	{
	  %<RTMSetErrStat("\"timer read error\"")>;
	  fprintf(stderr,"** timer read error **\n");
	  return -1;
	}
	
	if (missed > 1)
	{
	  info->wakeups_missed += (int)(missed-1);
	  fprintf(stderr,"** clock tic missed (total=%d) **\n",info->wakeups_missed); 
	  return -2;
	}
  
    return 0;
    
  }   %%end rpi_wait_period function

  %assign tid01Eq = LibGetTID01EQ()
  %assign fcnReturns = "void"
  %assign fcnName = "rt_OneStep"
  %assign fcnParams = "void"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    %<LibERTMainDeclareVariables(TLC_FALSE,TLC_TRUE)>
    
    /* Disable interrupts here */
    
    /* Check base rate for overrun */
    if (OverrunFlags[0]) {
      %<LibSetRTModelErrorStatus("\"Overrun\"")>;
      return;
    }
    OverrunFlags[0] = true;
    
    /* Save FPU context here (if necessary) */
    /* Re-enable timer or interrupt here */
    %assign varbuf = LibWriteModelInput(0,RollThreshold)
    %if !WHITE_SPACE(varbuf)
      /* Remove conditional, and set model inputs associated with base rate here */
      #if 0
      %<varbuf>\
      #endif
    %endif
    
    /* Check subrate overrun, set rates that need to run this time step*/ 
    %<LibCallSetEventForThisBaseStep("eventFlags")>\

    /* Step the model for base rate */
    %<LibCallModelStep(0)>\

    %assign varbuf = LibWriteModelOutput(0,RollThreshold)
    %if !WHITE_SPACE(varbuf)
      /* Remove conditional, and get model outputs associated with base rate here */
      #if 0
      %<varbuf>\
      #endif
    %endif
    
    OverrunFlags[0] = false;
    
    %if LibGetNumSyncPeriodicTasks() > 2
      /* Step the model for any subrate */
      for (i = %<1+tid01Eq>; i < %<LibNumSynchronousSampleTimes()>; i++) {
       %if InlineSetEventsForThisBaseRateFcn
         /* If task "i" is running, don't run any lower priority task */
         if (OverrunFlags[i]) return; 
       %endif
      if (eventFlags[i]) {
         %if !InlineSetEventsForThisBaseRateFcn
           if (OverrunFlags[i]) {
             %<LibSetRTModelErrorStatus("\"Overrun\"")>;
             return;
           }
         %endif
           OverrunFlags[i] = true;

         %foreach idx = LibNumSynchronousSampleTimes()
           %assign varbuf = LibWriteModelInput(idx+1,RollThreshold)
	    %if !WHITE_SPACE(varbuf)
	      /* Remove conditional and set model inputs associated with subrates here */
	    #if 0
	    if (i == %<idx+1>) {
	      %<varbuf>\
	     }
	    #endif
	   %endif
	  %endforeach

      switch(i) {
        %foreach idx = LibGetNumSyncPeriodicTasks() - 1
          %assign tid = idx + 1 + tid01Eq
		case %<tid> :
		   %<LibCallModelStep(tid)>\
		break;
	    %endforeach
	      default : 
	      break;
	    }

 	  %foreach idx = LibNumSynchronousSampleTimes()
	   %assign varbuf = LibWriteModelOutput(idx+1,RollThreshold)
	   %if !WHITE_SPACE(varbuf)
	     /* Remove conditional and set model outputs associated with subrates here */
	    #if 0
	    if (i == %<idx+1>) {
	      %<varbuf>\
	    }
	    #endif
	   %endif
	  %endforeach

	  OverrunFlags[i] = false;
          %if InlineSetEventsForThisBaseRateFcn
            eventFlags[i] = false;
          %endif
          
     }
    }
   %else
     %assign tid = LibNumSynchronousSampleTimes()-1
     %if InlineSetEventsForThisBaseRateFcn
       /* If task "1" is running, don't run any lower priority task */
       if (OverrunFlags[1]) return; 
     %endif
     /* Step the model for subrate */
     if (eventFlags[%<tid>]) {
        %if !InlineSetEventsForThisBaseRateFcn
          if (OverrunFlags[%<tid>]) {
            %<RTMSetErrStat("\"Overrun\"")>;
            return;
          }
        %endif
        OverrunFlags[%<tid>] = true;

        /* Set model inputs associated with subrates here */
        
        /* Step the model for subrate %<tid> */
        %<LibCallModelStep(tid)>\

        /* Get model outputs associated with subrates here */
        
        /* Indicate task complete for subrate */
        OverrunFlags[%<tid>] = false; 
        %if InlineSetEventsForThisBaseRateFcn
          eventFlags[%<tid>] = false;
        %endif
      }    
   %endif

    /* Disable interrupts here */
    /* Restore FPU context here (if necessary) */
    /* Enable interrupts here */
  }
  
  %assign fcnReturns = "int_T"
  %assign fcnName = "main"
  %assign fcnParams = "int_T argc, const char *argv[]"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_mrmain.tlc"; ...
    Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    /* Unused arguments */
    (void)(argc);
    (void)(argv);

    struct rpi_periodic_info  info;
    struct timespec           tmspc_before, tmspc_after;
    
    real_T     finaltime = -2.0;

    int_T  oldStyle_argc;
    const char_T *oldStyle_argv[5];

    /*******************
     * Parse arguments *
     *******************/

    if ((argc > 1) && (argv[1][0] != '-')) {
        /* old style */
        if ( argc > 3 ) {
            (void)printf("Too many arguments.\n");
            return(EXIT_FAILURE);
        }

        oldStyle_argc    = 1;
        oldStyle_argv[0] = argv[0];
    
        if (argc >= 2) {
            oldStyle_argc = 3;

            oldStyle_argv[1] = "-tf";
            oldStyle_argv[2] = argv[1];
        }

        if (argc == 3) {
            oldStyle_argc = 5;

            oldStyle_argv[3] = "-port";
            oldStyle_argv[4] = argv[2];

        }

        argc = oldStyle_argc;
        argv = oldStyle_argv;

    }

    {
        /* new style: */
        double    tmpDouble;
        char_T tmpStr2[200];
        int_T  count      = 1;
        int_T  parseError = false;

        /*
         * Parse the standard input parameters.  Let all unrecognized parameters
         * pass through to external mode for parsing.  NULL out all args handled
         * so that the external mode parsing can ignore them.
         */
        while(count < argc) {
            const char_T *option = argv[count++];
            
            /* final time */
            if ((strcmp(option, "-tf") == 0) && (count != argc)) {
                const char_T *tfStr = argv[count++];
                
                sscanf(tfStr, "%200s", tmpStr2);
                if ( (strcmp(tmpStr2, "inf") == 0) || (strcmp(tmpStr2, "Inf") == 0) ) {
                    tmpDouble = -1.0;
                } else {
                    char_T tmpstr[2];

                    if ( (sscanf(tmpStr2,"%lf%1s", &tmpDouble, tmpstr) != 1) ||
                         (tmpDouble < 0.0) ) {
                        (void)printf("Finaltime must be a positive, real value or inf.\n");
                        parseError = true;
                        break;
                    }
                }
                finaltime = (real_T) tmpDouble;
                if ( finaltime != -1.0 )
                  (void)printf("Warning: finite final time not implemented. Overriding.\n");

                argv[count-2] = %<SLibGetNullDefinitionFromTfl()>;
                argv[count-1] = %<SLibGetNullDefinitionFromTfl()>;
            }
        }

        if (parseError) {
            (void)printf("\nUsage: rpi -option1 val1 -option2 val2 -option3 "
                         "...\n\n");
            (void)printf("\t-tf 20 - sets final time to 20 seconds\n");

            return(EXIT_FAILURE);
        }

        %if ExtMode == 1
        rtExtModeParseArgs(argc, argv, %<SLibGetNullDefinitionFromTfl()>); 
        %endif

        /*
         * Check for unprocessed ("unhandled") args.
         */
        {
            int i;
            for (i=1; i<argc; i++) {
                if (argv[i] != %<SLibGetNullDefinitionFromTfl()>) {
                    printf("Unexpected command line argument: %s\n",argv[i]);
                    return(EXIT_FAILURE);
                }
            }
        }
    }
    
    /* Initialize model */
    %<LibCallModelInitialize()>\
    
    /* Associate rt_OneStep() with a timer that executes at the base rate of the model */
    
    %if ExtMode == 1
    /* External mode */
    %if !PurelyIntegerCode
    rtSetTFinalForExtMode(&%<RTMGet("TFinal")>);
    %else
    rtSetTFinalForExtMode(rteiGetPtrTFinalTicks(%<RTMGet("RTWExtModeInfo")>));
    %endif
    rtExtModeCheckInit(%<NumSynchronousSampleTimes>);
    {
      boolean_T rtmStopReq = false;
      rtExtModeWaitForStartPkt(%<RTMGet("RTWExtModeInfo")>, ...
        %<NumSynchronousSampleTimes>, ...
        &rtmStopReq);
      if (rtmStopReq) {
        %<RTMSetStopRequested("true")>;
      }
    }
    
    /* Start timer */
    %assign period = LibGetClockTickStepSize(0)
    rpi_make_periodic((uint_T)(%<period>*1000000.0), &info);

    /* Main loop */
    while ((rtmGetErrorStatus(%<Name>_M) == (NULL)) &&
           !rtmGetStopRequested(%<Name>_M)) {
      {
        /* external mode */
        boolean_T rtmStopReq = false;

        rtExtModePauseIfNeeded(%<RTMGet("RTWExtModeInfo")>, ...
          %<NumSynchronousSampleTimes>, ...
          &rtmStopReq);

        rtExtModeOneStep(%<RTMGet("RTWExtModeInfo")>, ...
          %<NumSynchronousSampleTimes>, ...
          &rtmStopReq);

        if (rtmStopReq) {
          %<RTMSetStopRequested("true")>;
        }
      }

      rpi_wait_period(&info);
      clock_gettime( CLOCK_MONOTONIC, &tmspc_before );
      rt_OneStep( );
      clock_gettime( CLOCK_MONOTONIC, &tmspc_after );
      rpi_cpu_usage = (uint_T)( (  (real_T)( tmspc_after.tv_sec - tmspc_before.tv_sec ) 
                                 + (real_T)( tmspc_after.tv_nsec - tmspc_before.tv_nsec ) * 1e-9 )
                                 / (real_T)%<period> * 100.0 );
    }
    
    /* Terminate external mode */
    rtExtModeShutdown(%<NumSynchronousSampleTimes>);
    
    %endif

     %<LibCallModelTerminate()>\
    return(EXIT_SUCCESS);
  }   %%end void function

  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_fcn_defn", tmpBuf)>

  %<SetCurrentUtilsIncludesIdx("")>

%endfunction
