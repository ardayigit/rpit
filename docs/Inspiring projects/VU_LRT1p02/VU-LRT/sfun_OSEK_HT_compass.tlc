%% File : sfun_OSEK_HT_compass.tlc
%% Created: Thu Jun  2 11:56:46 2011
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "sf_compass.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfun_OSEK_HT_compass "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile buffer
    #include "ecrobot_hooks.h"
  %closefile buffer
  %<LibCacheExtern(buffer)>
  %%
%endfunction


%% Function: Start =============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
    
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
    
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
       switch ((int)*%<pp1>){
        case 1:
            ecrobot_init_compass_sensor(NXT_PORT_S1);
            ecrobot_cal_compass_sensor(NXT_PORT_S1);
            break;
        case 2:
            ecrobot_init_compass_sensor(NXT_PORT_S2);
            ecrobot_cal_compass_sensor(NXT_PORT_S1);
            break;
        case 3:
            ecrobot_init_compass_sensor(NXT_PORT_S3);
            ecrobot_cal_compass_sensor(NXT_PORT_S1);
            break;
        default:
            ecrobot_init_compass_sensor(NXT_PORT_S4);
            ecrobot_cal_compass_sensor(NXT_PORT_S1);
            break;   
}
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
switch ((int)*%<pp1>){
        case 1:   
            *%<py0> = ecrobot_get_compass_sensor(NXT_PORT_S1);
        break;
        case 2:   
            *%<py0> = ecrobot_get_compass_sensor(NXT_PORT_S2);
        break;
        case 3:   
            *%<py0> = ecrobot_get_compass_sensor(NXT_PORT_S3);
        break;
        default:   
            *%<py0> = ecrobot_get_compass_sensor(NXT_PORT_S4);
        break;
}
  %%
%endfunction


%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */

%assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
   switch ((int)*%<pp1>){
        case 1:
             ecrobot_term_i2c(NXT_PORT_S1);
             break;
        case 2:
             ecrobot_term_i2c(NXT_PORT_S2);
            break;
        case 3:
             ecrobot_term_i2c(NXT_PORT_S3);
            break;
        default:
             ecrobot_term_i2c(NXT_PORT_S4);
            break;
    }
%endfunction

%% [EOF] sf_compass.tlc





