%% File : sfun_OSEK_i2c_recieve.tlc
%% Created: Thu Jun 16 10:49:53 2011
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "sfun_OSEK_i2c_recieve.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfun_OSEK_i2c_recieve "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile buffer
    #include "ecrobot_hooks.h"
  %closefile buffer
  %<LibCacheExtern(buffer)>
  %%
%endfunction

%% Function: Start =============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */    
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif 
     switch ((int)*%<pp1>){
            case 1:
                ecrobot_init_i2c(NXT_PORT_S1, LOWSPEED);
                break;
            case 2:
                ecrobot_init_i2c(NXT_PORT_S2, LOWSPEED);
                break;
            case 3:
                ecrobot_init_i2c(NXT_PORT_S3, LOWSPEED);
                break;
            default:
                ecrobot_init_i2c(NXT_PORT_S4, LOWSPEED);
                break;   
    }
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
    switch ((int)*%<pp1>){
        case 1:
          ecrobot_wait_i2c_ready(NXT_PORT_S1,50);
          ecrobot_read_i2c(NXT_PORT_S1, *%<pp2>,*%<pp3>, %<py0>, *%<pp4>);
          break;
        case 2:
          ecrobot_wait_i2c_ready(NXT_PORT_S2,50);
          ecrobot_read_i2c(NXT_PORT_S2, *%<pp2>,*%<pp3>, %<py0>, *%<pp4>);
          break;
        case 3:
          ecrobot_wait_i2c_ready(NXT_PORT_S3,50);
          ecrobot_read_i2c(NXT_PORT_S3, *%<pp2>,*%<pp3>, %<py0>, *%<pp4>);
          break;
        default:
          ecrobot_wait_i2c_ready(NXT_PORT_S4,50);
          ecrobot_read_i2c(NXT_PORT_S4, *%<pp2>,*%<pp3>, %<py0>, *%<pp4>);                 
          break;
  } 
  %%
%endfunction


%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
 %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]  
  %if (param_width1) > 1  
   %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else  
   %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif 
     switch ((int)*%<pp1>){
            case 1:
                ecrobot_term_i2c(NXT_PORT_S1);
                break;
            case 2:
                ecrobot_term_i2c(NXT_PORT_S2);
                break;
            case 3:
                ecrobot_term_i2c(NXT_PORT_S3);
                break;
            default:
                ecrobot_term_i2c(NXT_PORT_S4);
                break;   
    }
%endfunction

%% [EOF] sfun_OSEK_i2c_recieve.tlc





