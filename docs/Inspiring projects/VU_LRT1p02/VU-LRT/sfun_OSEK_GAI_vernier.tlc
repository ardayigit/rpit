%% File : generic_analog_input.tlc
%% Created: Thu Jun 30 15:14:54 2011
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "generic_analog_input.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfun_OSEK_GAI_vernier "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile buffer
    #include "ecrobot_hooks.h"
  %closefile buffer
  %<LibCacheExtern(buffer)>
  %%
%endfunction


%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
     %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
   %else
     %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
   %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
     %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
   %else
     %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
   %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
     %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
   %else
     %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
   %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
     %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
   %else
     %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)


switch((int)*%<pp1>) {
	  case 1:
		  *%<py0> = sensor_adc(NXT_PORT_S1);
		  break;
	  case 2:
		  *%<py0> = sensor_adc(NXT_PORT_S2);
		  break;
	  case 3:
		  *%<py0> = sensor_adc(NXT_PORT_S3);
		  break;
	  default:
		  *%<py0> = sensor_adc(NXT_PORT_S4);
		  break;
  }
%%Convert the raw value to the units supplied
%%The divide by 100000 is there because the Vernier sensors return their
%%    true values times 100000
if(*%<pp4>) %%if signed
    *%<py0> = (int16_T)((*%<py0> * (*%<pp2>)+ (*%<pp3>)) / 100000);
else        %%if unsigned
    *%<py0> = (uint16_T)((*%<py0> * (*%<pp2>)+ (*%<pp3>)) / 100000);
  %%
%endfunction


%% [EOF] generic_analog_input.tlc





