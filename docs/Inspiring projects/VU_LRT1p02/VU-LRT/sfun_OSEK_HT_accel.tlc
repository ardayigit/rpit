%% File : sfun_OSEK_HT_accel.tlc
%% Created: Thu Jun 24 13:57:06 2010
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "sfun_OSEK_HT_accel.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfun_OSEK_HT_accel "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile buffer
  #include "ecrobot_hooks.h"
  %closefile buffer
  %<LibCacheExtern(buffer)>
  %%
%endfunction

%function Start(block, system) Output
  %%
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  switch((int)*%<pp1>) {
	  case 1:
		  ecrobot_init_accel_sensor(NXT_PORT_S1);
		  break;
	  case 2:
		  ecrobot_init_accel_sensor(NXT_PORT_S2);
		  break;
	  case 3:
		  ecrobot_init_accel_sensor(NXT_PORT_S3);
		  break;
	  default:
		  ecrobot_init_accel_sensor(NXT_PORT_S4);
		  break;
  }
  %%
%endfunction

%function Terminate(block, system) Output
  %%
  /* %<Type> Block: %<Name> */
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  switch((int)*%<pp1>) {
	  case 1:
		  ecrobot_term_accel_sensor(NXT_PORT_S1);
		  break;
	  case 2:
		  ecrobot_term_accel_sensor(NXT_PORT_S2);
		  break;
	  case 3:
		  ecrobot_term_accel_sensor(NXT_PORT_S3);
		  break;
	  default:
		  ecrobot_term_accel_sensor(NXT_PORT_S4);
		  break;
  }
  %%
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
     %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
   %else
     %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
   %endif
  %assign py_width = LibBlockOutputSignalWidth(0)
  int buf[3];
  switch((int)*%<pp1>) {
	  case 1:
		  ecrobot_get_accel_sensor(NXT_PORT_S1, (S16*)buf);
		  break;
	  case 2:
		  ecrobot_get_accel_sensor(NXT_PORT_S2, (S16*)buf);
		  break;
	  case 3:
		  ecrobot_get_accel_sensor(NXT_PORT_S3, (S16*)buf);
		  break;
	  default:
		  ecrobot_get_accel_sensor(NXT_PORT_S4, (S16*)buf);
		  break;
  }
  *%<py0> = buf[0];
  *%<py1> = buf[1];
  *%<py2> = buf[2];
  %%
%endfunction


%% [EOF] sfun_OSEK_HT_accel.tlc





