%% File : sfun_OSEK_usbinterface.tlc
%% Created: Mon Jun 28 16:48:55 2010
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for 
%%   S-function "sfun_OSEK_usbinterface.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  sfun_OSEK_usbinterface "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile buffer
  #include "ecrobot_hooks.h"
  DeclareResource(RES_Rx);
  %closefile buffer
  %<LibCacheExtern(buffer)>
  %%
%endfunction

%function Start(block, system) Output
  %%
  ecrobot_init_usb();
  %%
%endfunction

%function Terminate(block, system) Output
  %%
  ecrobot_term_usb();
  %%
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  %assign pu_width = LibBlockInputSignalWidth(0)
  
  GetResource(RES_Rx);
  *%<py1> = ecrobot_read_usb(%<py0>, 0, MAX_USB_DATA_LEN);
  ReleaseResource(RES_Rx);
  
  ecrobot_send_usb(%<pu0>, 0, %<pu_width>);
  %%
%endfunction


%% [EOF] sfun_OSEK_usbinterface.tlc





