%% ==============================================================================
%% $RCSfile: rpi_mrmain.tlc,v $
%% $Revision: 1.1.6.13 $
%% $Date: 2009/10/24 16:35:01 $
%%
%% Abstract:
%%   Example main for bare board target (multirate model)
%%
%% Copyright 1994-2009 The MathWorks, Inc.
%%
%selectfile NULL_FILE

%function FcnMultiTaskingMain() void
  
  %if GenerateSampleERTMain
    %assign CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %warning Overriding example ert_main.c!
  %endif

  %openfile tmpBuf
  %<LibERTMainDeclareVariables(TLC_TRUE,TLC_TRUE)>
  %<LibWriteModelData()>\
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_data_defn", tmpBuf)>
  
  %openfile tmpBuf
  #include <stdio.h>
  #include <stdlib.h>
  #include <stdint.h>
  #include <pthread.h>
  #include <string.h>
  #include <unistd.h>
  #include <time.h>
  #include <sys/time.h>
  #include <sys/timerfd.h>
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  
  struct rpi_periodic_info
  {
    int_T timer_fd;
    uint_T wakeups_missed;
  };

  uint_T rpi_cpu_usage = 0;
  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_incl", tmpBuf)>
  
  %openfile tmpBuf
  
  %assign fcnReturns = "static int_T"
  %assign fcnName = "rpi_make_periodic"
  %assign fcnParams = "uint_T period, struct rpi_periodic_info *info"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    int_T ret;
	uint_T ns;
	uint_T sec;
	int_T fd;
	struct itimerspec itval;

	/* Create the timer */
	fd = timerfd_create (CLOCK_MONOTONIC, 0);
	info->wakeups_missed = 0;
	info->timer_fd = fd;
	if (fd == -1)
		return fd;

	/* Make the timer periodic */
	sec = period/1000000;
	ns = (period - (sec * 1000000)) * 1000;
	itval.it_interval.tv_sec = sec;
	itval.it_interval.tv_nsec = ns;
	itval.it_value.tv_sec = sec;
	itval.it_value.tv_nsec = ns;
	ret = timerfd_settime (fd, 0, &itval, NULL);
	return ret;
  }   %%end rpi_make_periodic function

%assign fcnReturns = "static int_T"
  %assign fcnName = "rpi_wait_period"
  %assign fcnParams = "struct rpi_periodic_info *info"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
	unsigned long long missed;
	int_T ret;

	/* 
	  Wait for the next timer event. 
	  If we have missed any the
	  number is written to "missed"
	*/
	
	ret = read(info->timer_fd, &missed, sizeof (missed));
	
	if (ret == -1)
	{
	  %<RTMSetErrStat("\"timer read error\"")>;
	  fprintf(stderr,"** timer read error **\n");
	  return -1;
	}
	
	if (missed > 1)
	{
	  info->wakeups_missed += (int)(missed-1);
	  fprintf(stderr,"** clock tic missed (total=%d) **\n",info->wakeups_missed); 
	  return -2;
	}
  
    return 0;
    
  }   %%end rpi_wait_period function
  
  %assign tid01Eq = LibGetTID01EQ()
  %assign fcnReturns = "void"
  %assign fcnName = "rt_OneStep"
  %assign fcnParams = "void"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    %<LibERTMainDeclareVariables(TLC_FALSE,TLC_TRUE)>
    
    /* Check base rate for overrun */
    if (OverrunFlags[0]) {
      %<LibSetRTModelErrorStatus("\"Overrun\"")>;
      return;
    }
    OverrunFlags[0] = TRUE;
    
    %assign varbuf = LibWriteModelInput(0,RollThreshold)
    %if !WHITE_SPACE(varbuf)
      /* Remove conditional, and set model inputs associated with base rate here */
      #if 0
      %<varbuf>\
      #endif
    %endif
    
    /* Check subrate overrun, set rates that need to run this time step*/ 
    %<LibCallSetEventForThisBaseStep("eventFlags")>\

    /* Step the model for base rate */
    %<LibCallModelStep(0)>\

    %assign varbuf = LibWriteModelOutput(0,RollThreshold)
    %if !WHITE_SPACE(varbuf)
      /* Remove conditional, and get model outputs associated with base rate here */
      #if 0
      %<varbuf>\
      #endif
    %endif
    
    OverrunFlags[0] = FALSE;
    
    %if LibGetNumSyncPeriodicTasks() > 2
      /* Step the model for any subrate */
      for (i = %<1+tid01Eq>; i < %<LibNumSynchronousSampleTimes()>; i++) {
       %if InlineSetEventsForThisBaseRateFcn
         /* If task "i" is running, don't run any lower priority task */
         if (OverrunFlags[i]) return; 
       %endif
      if (eventFlags[i]) {
         %if !InlineSetEventsForThisBaseRateFcn
           if (OverrunFlags[i]) {
             %<LibSetRTModelErrorStatus("\"Overrun\"")>;
             return;
           }
         %endif
           OverrunFlags[i] = TRUE;

         %foreach idx = LibNumSynchronousSampleTimes()
           %assign varbuf = LibWriteModelInput(idx+1,RollThreshold)
	    %if !WHITE_SPACE(varbuf)
	      /* Remove conditional and set model inputs associated with subrates here */
	    #if 0
	    if (i == %<idx+1>) {
	      %<varbuf>\
	     }
	    #endif
	   %endif
	  %endforeach

      switch(i) {
        %foreach idx = LibGetNumSyncPeriodicTasks() - 1
          %assign tid = idx + 1 + tid01Eq
		case %<tid> :
		   %<LibCallModelStep(tid)>\
		break;
	    %endforeach
	      default : 
	      break;
	    }

 	  %foreach idx = LibNumSynchronousSampleTimes()
	   %assign varbuf = LibWriteModelOutput(idx+1,RollThreshold)
	   %if !WHITE_SPACE(varbuf)
	     /* Remove conditional and set model outputs associated with subrates here */
	    #if 0
	    if (i == %<idx+1>) {
	      %<varbuf>\
	    }
	    #endif
	   %endif
	  %endforeach

	  OverrunFlags[i] = FALSE;
          %if InlineSetEventsForThisBaseRateFcn
            eventFlags[i] = FALSE;
          %endif
          
     }
    }
   %else
     %assign tid = LibNumSynchronousSampleTimes()-1
     %if InlineSetEventsForThisBaseRateFcn
       /* If task "1" is running, don't run any lower priority task */
       if (OverrunFlags[1]) return; 
     %endif
     /* Step the model for subrate */
     if (eventFlags[%<tid>]) {
        %if !InlineSetEventsForThisBaseRateFcn
          if (OverrunFlags[%<tid>]) {
            %<RTMSetErrStat("\"Overrun\"")>;
            return;
          }
        %endif
        OverrunFlags[%<tid>] = TRUE;

        /* Set model inputs associated with subrates here */
        
        /* Step the model for subrate %<tid> */
        %<LibCallModelStep(tid)>\

        /* Get model outputs associated with subrates here */
        
        /* Indicate task complete for subrate */
        OverrunFlags[%<tid>] = FALSE; 
        %if InlineSetEventsForThisBaseRateFcn
          eventFlags[%<tid>] = FALSE;
        %endif
      }    
   %endif

  }
  
  %assign fcnReturns = "int_T"
  %assign fcnName = "main"
  %assign fcnParams = "int_T argc, const char_T *argv[]"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "rpi_mrmain.tlc"; ...
    Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    struct rpi_periodic_info  info;
    struct timespec           tmspc_before, tmspc_after;
    
    %if ExtMode == 1

    /* External mode */
    rtERTExtModeParseArgs(argc, argv);
    %endif
    
    /* Initialize model */
    %<LibCallModelInitialize()>\
    
    %assign period = LibGetClockTickStepSize(0)
    rpi_make_periodic((uint_T)(%<period>*1000000.0), &info);

    /* Associate rt_OneStep() with a timer that executes at the base rate of the model */
    
    %if ExtMode == 1
    
    /* Main loop : the rate is clocked by "rpi_wait_period" */
    
    while ((rtmGetErrorStatus(%<Name>_M) == (NULL)) && !rtmGetStopRequested(%<Name>_M)) {

      rpi_wait_period (&info);
      clock_gettime( CLOCK_MONOTONIC, &tmspc_before );
      rt_OneStep();
      clock_gettime( CLOCK_MONOTONIC, &tmspc_after );
      rpi_cpu_usage = (uint_T)( (  (real_T)( tmspc_after.tv_sec - tmspc_before.tv_sec ) 
                                 + (real_T)( tmspc_after.tv_nsec - tmspc_before.tv_nsec ) * 1e-9 )
                                 / (real_T)%<period> * 100.0 );
    }
    
    /* External mode */
    rtExtModeShutdown(%<NumSynchronousSampleTimes>);
    %endif
    
    %<LibCallModelTerminate()>\
    return 0;
  }   %%end void function

  %closefile tmpBuf
  
  %<SLibCacheCodeToFile("mainSrc_fcn_defn", tmpBuf)>
  
%endfunction
